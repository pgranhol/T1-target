//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
/// \file DetectorConstruction.cc
/// \brief Implementation of the DetectorConstruction class
//
// $Id: DetectorConstruction.cc 70755 2013-06-05 12:17:48Z ihrivnac $
//

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

#include "DetectorConstruction.hh"
#include "DetectorMessenger.hh"
#include "G4Material.hh"
#include "G4Isotope.hh"
#include "G4Element.hh"
#include "G4NistManager.hh"

#include "G4Box.hh"
#include "G4Tubs.hh"
#include "G4LogicalVolume.hh"
#include "G4PVPlacement.hh"

#include "G4GeometryManager.hh"
#include "G4PhysicalVolumeStore.hh"
#include "G4LogicalVolumeStore.hh"
#include "G4SolidStore.hh"
#include "G4RunManager.hh"

#include "G4SystemOfUnits.hh"
#include "G4PhysicalConstants.hh"
#include "G4UnitsTable.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

DetectorConstruction::DetectorConstruction()
:G4VUserDetectorConstruction(),
 fTargetMaterial(nullptr), fLTarget(nullptr), fWorldMaterial(nullptr),
 fWorldVolume(nullptr), fDetectorMessenger(nullptr)
{
  // default geometrical parameters
  //  fTargetLength    = 1*cm;
  //  fTargetRadius    = 1*cm;
  //  fWorldSizeX     = 2*fHeliumLength;
  //  fWorldSizeYZ    = 2*fTargetRadius;

  // materials
  DefineMaterials();
  SetTargetMaterial("H218O");

  // create commands for interactive definition of the geometry
  fDetectorMessenger = new DetectorMessenger(this);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

DetectorConstruction::~DetectorConstruction()
{ delete fDetectorMessenger;}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* DetectorConstruction::Construct()
{
  return ConstructVolumes();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void DetectorConstruction::DefineMaterials()
{
  // specific element name for thermal neutronHP
  // (see G4ParticleHPThermalScatteringNames.cc)

  //Get nist material
  G4NistManager* nist = G4NistManager::Instance();

  //G4double fractionmass, density, pressure, temperature;
  G4double density;
  G4double abudance;
  G4String name, symbol;
  G4int nel, natoms;
  G4int ncomponents;
 
  G4Material* Ag = nist->FindOrBuildMaterial("G4_Ag"); 
  G4Material* Ni = nist->FindOrBuildMaterial("G4_Ni");
  G4Material* He = nist->FindOrBuildMaterial("G4_He");

  // pressurized water
  G4Element* H  = new G4Element("TS_H_of_Water" ,"H" , 1., 1.0079*g/mole);
  G4Element* O  = new G4Element("Oxygen"        ,"O" , 8., 16.00*g/mole);
  G4Material* H2O = 
  new G4Material("Water_ts", 1.000*g/cm3, ncomponents=2,
                            kStateLiquid, 593*kelvin, 150*bar);
  H2O->AddElement(H, natoms=2);
  H2O->AddElement(O, natoms=1);
  H2O->GetIonisation()->SetMeanExcitationEnergy(78.0*eV);

  // 18O Water
  //Isotopes
  G4Isotope* O18 = new G4Isotope("O18", 8, 18, 18.0*g/mole); //z, N, a  
  G4Isotope* O16 = new G4Isotope("O16", 8, 16, 15.99*g/mole);
  G4Isotope* O17 = new G4Isotope("O17", 8, 17, 17.0*g/mole); 

  G4Element* elOw = new G4Element("18Oxygen", "18O", ncomponents=3);
  elOw->AddIsotope(O18, abudance = 98.3*perCent);
  elOw->AddIsotope(O17, abudance = 0.7*perCent);
  elOw->AddIsotope(O16, abudance = 1.0*perCent);
  G4Element* elH = nist->FindOrBuildElement("H");
  density = 1.11*g/cm3;
  G4Material* O18Water = new G4Material("H218O", density, nel = 2);
  O18Water -> AddElement(elH, natoms = 2);
  O18Water -> AddElement(elOw, natoms = 1);
  //  fTargetMaterial = O18Water;

  // heavy water
  G4Isotope* H2 = new G4Isotope("H2",1,2);
  G4Element* D  = new G4Element("TS_D_of_Heavy_Water", "D", 1);
  D->AddIsotope(H2, 100*perCent);  
  G4Material* D2O = new G4Material("HeavyWater", 1.11*g/cm3, ncomponents=2,
                        kStateLiquid, 293.15*kelvin, 1*atmosphere);
  D2O->AddElement(D, natoms=2);
  D2O->AddElement(O, natoms=1);

  // graphite
  G4Isotope* C12 = new G4Isotope("C12", 6, 12);  
  G4Element* C   = new G4Element("TS_C_of_Graphite","C", ncomponents=1);
  C->AddIsotope(C12, 100.*perCent);
  G4Material* graphite = 
  new G4Material("graphite", 2.27*g/cm3, ncomponents=1,
                         kStateSolid, 293*kelvin, 1*atmosphere);
  graphite->AddElement(C, natoms=1);

  // example of vacuum
  fWorldMaterial = new G4Material("Galactic", 1, 1.01*g/mole,
            universe_mean_density, kStateGas, 2.73*kelvin, 3.e-18*pascal);

// Steel Cr 17-20%, Mn 2%, Ni 7-10% Fe to balance, Goodfellow Cambridge Limited, AISI 321 FE210244
  G4Element* elFe = nist->FindOrBuildElement("Fe");
  G4Element* elMn = nist->FindOrBuildElement("Mn");
  G4Element* elCr = nist->FindOrBuildElement("Cr");

  density = 7.96*g/cm3;
  G4Material* Steel = new G4Material("Steel1", density, nel = 4);
  Steel -> AddElement(elCr, 18.5*perCent);
  Steel -> AddElement(elMn, 2*perCent);
  Steel -> AddMaterial(Ni, 8.5*perCent);
  Steel -> AddElement(elFe, 71*perCent);
  
  fTargetSealMaterial = Ni;
  fTargetChamberMaterial = Ag;
  fCoolingHeMaterial = He;
  fBeamCapMaterial = Steel;

 ///G4cout << *(G4Material::GetMaterialTable()) << G4endl;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4Material* DetectorConstruction::MaterialWithSingleIsotope( G4String name,
                           G4String symbol, G4double density, G4int Z, G4int A)
{
 // define a material from an isotope
 //
 G4int ncomponents;
 G4double abundance, massfraction;

 G4Isotope* isotope = new G4Isotope(symbol, Z, A);
 
 G4Element* element  = new G4Element(name, symbol, ncomponents=1);
 element->AddIsotope(isotope, abundance= 100.*perCent);
 
 G4Material* material = new G4Material(name, density, ncomponents=1);
 material->AddElement(element, massfraction=100.*perCent);

 return material;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* DetectorConstruction::ConstructVolumes()
{
  // Cleanup old geometry
  // G4GeometryManager::GetInstance()->OpenGeometry();
  // G4PhysicalVolumeStore::GetInstance()->Clean();
  // G4LogicalVolumeStore::GetInstance()->Clean();
  // G4SolidStore::GetInstance()->Clean();

  fInnerRadius = 0.00*mm;         // tubs inner radius
  fTargetRadius = 9.50*mm;        // radius of the water target
  fOuterRadius = 10.00*mm;        // outer radius of the target chamber
  fTargetLength = 1.41*mm;        // half length in Z of the water target (could be calculated here)
  fChamberLength = 1.66*mm;       // half length in Z of the target chamber 0.5 mm chamber back thickness
  fNickelfoilLength = 0.025*mm;   // half length in Z of the nickel foil
  fSteelfoilLength = 0.0125*mm;   // half length in z of the steel foil
  fHeliumLength = 17.0*mm;        // half of the cooling helium
  
  G4double startAngle = 0.*deg;           // full cylinder
  G4double spanningAngle = 360.*deg;      // full cylinder

  G4bool checkOverlaps = true;

  // World
  //
  fWorldSizeX     = 15*cm; //10*fHeliumLength;
  fWorldSizeYZ    = 15*cm; //10*fTargetRadius;
  
  G4Box*
  sWorld = new G4Box("World",                                 //name
              fWorldSizeX/2,fWorldSizeYZ/2,fWorldSizeYZ/2);   //dimensions

  G4LogicalVolume*
  lWorld = new G4LogicalVolume(sWorld,                  //shape
                             fWorldMaterial,            //material
                             "World");                  //name

  fWorldVolume = new G4PVPlacement(0,                   //no rotation
                            G4ThreeVector(),            //at (0,0,0)
                            lWorld,                     //logical volume
                            "World",                    //name
                            0,                          //mother volume
                            false,                      //no boolean operation
                            0);                         //copy number
                            
 
 
  // Target chamber a silver cylinder
  G4Tubs* solidTargetChamber = new G4Tubs("TargetChamber", fInnerRadius, fOuterRadius, fChamberLength, startAngle, spanningAngle); 
  G4LogicalVolume* logicTargetChamber = new G4LogicalVolume(solidTargetChamber, // solid
							    fTargetChamberMaterial,     // material
							    "TargetChamber",    // name
							    0,                  // field manager
							    0,                  // sensitive detector
							    0);                 // user limits
 
  new G4PVPlacement(0,                                           // rotation
		    G4ThreeVector(0, 0, 0),                      // translation
		    logicTargetChamber,                          // logical volume
		    "TargetChamber",                             // name
		    lWorld,                                      // mother volume
		    false,                                       // no boolean operator
		    0,                                           // copy number
		    checkOverlaps);                              // check for overlaps

// Target chamber seal, nickel
  G4Tubs* solidTargetSeal = new G4Tubs("TargetSeal", fInnerRadius, fOuterRadius, fNickelfoilLength, startAngle, spanningAngle); 
  G4LogicalVolume* logicTargetSeal = new G4LogicalVolume(solidTargetSeal,    // solid
							 fTargetSealMaterial, // material Ni
							 "TargetSeal",       // name
							 0,                  // field manager
							 0,                  // sensitive detector
							 0);                 // user limits
 
  new G4PVPlacement(0,                                                   // rotation
		    G4ThreeVector(0, 0, -1.715e-3*m),                    // translation
		    logicTargetSeal,                                     // logical volume
		    "TargetSeal",                                        // name
		    lWorld,                                              // mother volume
		    false,                                               // no boolean operator
		    0,                                                   // copy number
		    checkOverlaps);                                      // check for overlaps

// Helium cooling
  G4Tubs* solidHeliumCooling = new G4Tubs("HeliumCooling", fInnerRadius, fOuterRadius, fHeliumLength, startAngle, spanningAngle);
  G4LogicalVolume* logicHeliumCooling = new G4LogicalVolume(solidHeliumCooling,    // solid
							    fCoolingHeMaterial,     // material
							    "HeliumCooling",       // name
							    0,                     // field manager
							    0,                     // sesitive detector
							    0);                    // user limits

  new G4PVPlacement(0,                                                     // rotation
		    G4ThreeVector(0, 0, -19.21*mm),                        // translation
		    logicHeliumCooling,                                    // logical volume
		    "HeliumCooling",                                       // name
		    lWorld,                                                // mother Volume
		    false,                                                 // no boolean operator
		    0,                                                     // copy number
		    checkOverlaps);                                        // check for overlaps

// Beam line cap, Steel
  G4Tubs* solidBeamlineCap = new G4Tubs("BeamlineCap", fInnerRadius, fOuterRadius, fSteelfoilLength, startAngle, spanningAngle);
  G4LogicalVolume* logicBeamlineCap = new G4LogicalVolume(solidBeamlineCap,    // solid
							  fBeamCapMaterial,    // material
							  "BeamlineCap",       // name
							  0,                   // field manager
							  0,                   // sesitive detector
							  0);                  // user limits

  new G4PVPlacement(0,                                                   // rotation
		    G4ThreeVector(0, 0, -36.735*mm),                     // translation
		    logicBeamlineCap,                                    // logical volume
		    "BeamlineCap",                                       // name
		    lWorld,                                              // mother Volume
		    false,                                               // no boolean operator
		    0,                                                   // copy number
		    checkOverlaps);                                      // check for overlaps

// Water target H2 18-O
  G4Tubs* solidWaterTarget = new G4Tubs("WaterTarget", fInnerRadius, fTargetRadius, fTargetLength, startAngle, spanningAngle); 
  fLTarget = new G4LogicalVolume(solidWaterTarget,            // solid
				 fTargetMaterial,                      // material
				 //"WaterTarget",
				 fTargetMaterial->GetName(),  // name
				 0,                           // field manager
				 0,                           // sensitive detector
				 0);                          // user limits
 
  new G4PVPlacement(0,                                                  // rotation
		    G4ThreeVector(0, 0, -0.25e-3*m),                    // translation
		    fLTarget,                                           // logical volume
		    "WaterTarget",                                      // name
		    logicTargetChamber,                                 // mother volume
		    false,                                              // no boolean operator
		    0,                                                  // copy number
		    checkOverlaps);                                     // check for overlaps


  // Absorber
  //
  // G4Box* sAbsor = new G4Box("Absorber",                       //name
  //      fAbsorThickness/2, fAbsorSizeYZ/2, fAbsorSizeYZ/2);   //dimensions

  // fLAbsor = new G4LogicalVolume(sAbsor,                        //shape
  //                             fAbsorMaterial,                //material
  //                             fAbsorMaterial->GetName());    //name
  //                             
  //         new G4PVPlacement(0,                         //no rotation
  //                         G4ThreeVector(),             //at (0,0,0)
  //                         fLAbsor,                     //logical volume
  //                         fAbsorMaterial->GetName(),   //name
  //                         lWorld,                      //mother  volume
  //                         false,                       //no boolean operation
  //                         0);                          //copy number

  //  PrintParameters();
  
  //always return the root volume
  //
  return fWorldVolume;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void DetectorConstruction::PrintParameters()
{
  G4cout << "\n The target is " << G4BestUnit(fTargetLength,"Length")
         << " of " << fTargetMaterial->GetName() 
         << "\n \n" << fTargetMaterial << G4endl;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void DetectorConstruction::SetTargetMaterial(G4String materialChoice)
{
  // search the material by its name
  G4Material* pttoMaterial =
     G4NistManager::Instance()->FindOrBuildMaterial(materialChoice);   
  
  if (pttoMaterial) { 
    fTargetMaterial = pttoMaterial;
    if(fLTarget) { fLTarget->SetMaterial(fTargetMaterial); }
    G4RunManager::GetRunManager()->PhysicsHasBeenModified();
  } else {
    G4cout << "\n--> warning from DetectorConstruction::SetMaterial : "
           << materialChoice << " not found" << G4endl;
  }              
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//
void DetectorConstruction::SetTargetLength(G4double value)
{
  fTargetLength = value;
  G4RunManager::GetRunManager()->ReinitializeGeometry();
}
//
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//
//void DetectorConstruction::SetAbsorSizeYZ(G4double value)
//{
//  fTargetRadius = value;
//  G4RunManager::GetRunManager()->ReinitializeGeometry();
//}
//
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
